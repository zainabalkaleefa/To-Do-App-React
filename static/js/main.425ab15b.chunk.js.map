{"version":3,"sources":["IncompletedTask/IncompletedTask.js","CompletedTask/CompletedTask.js","InputAndAdd/InputAndAdd.js","NumberOfTasks/NumberOfTasks.js","App.js","serviceWorker.js","index.js"],"names":["IncompletedTask","props","className","align","status","text","type","CompletedTask","role","aria-label","class","InputAndAdd","count","style","width","progress","aria-valuenow","aria-valuemin","aria-valuemax","name","placeholder","aria-describedby","NumberOfTasks","App","useState","dueDate","activeTasks","completedTasks","progressPrecentage","length","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.425ab15b.chunk.js","sourcesContent":["import React from 'react';\nimport './IncompletedTask.css';\n\nfunction IncompletedTask(props) {\n  return (\n    <div className=\"container\" align =\"center\">\n      \n    <div className= \"row col-10 list-group-item d-flex justify-content-between align-items-center \">\n        \n               \n                  <div className={`col-12 col-md-8 task-text task task--${ props.status ? 'complete' : 'active'}`} align=\"center\">\n                  {props.text}\n                  </div>\n                  <div className=\"col-12 col-md-4\" >\n                    <button type=\"button\" className=\"content3 btn btn-danger\" > Resume</button>\n                    <button type=\"button\" className=\"content3 btn btn-danger \" > Delete</button> \n                  </div>\n               \n        </div>\n    </div>\n   \n  );\n}\n\nexport default IncompletedTask;\n","import React from 'react';\nimport './CompletedTask.css';\n\nfunction CompletedTask(props) {\n  return (\n\n\n\n\n    <div className=\"container \" align =\"center\">\n      \n    <div className= \"row col-10 list-group-item d-flex justify-content-between align-items-center \">\n        \n\n    <div className=\"col-12 col-md-9 task-text1\" align=\"center\">\n                  <span className=\" line-through\">{props.text}</span> \n                  </div>\n                  <div className=\"col-12 col-md-3\" role=\"group\" aria-label=\"Basic example\" align=\"left\">\n                  <span class=\"badge badge-primary badge-pill content4\"> Completed &#10003;</span>\n                  </div>\n              \n    </div>  \n  </div>\n  );\n}\n\nexport default CompletedTask;\n","import React from 'react';\nimport './InputAndAdd.css';\n\nfunction InputAndAdd(props) {\n  return (\n\n    <div className=\"container \" align =\"center\">\n        \n        <div className=\"row\"> \n            <p className=\"numberoftext_text\"> {props.count} Total tasks: </p>\n        </div>\n        <div className=\"row\"> \n        <div className=\"col-10 col-md-8\">\n        <div class=\"progress bar\" >\n        <div class=\"progress-bar bg-danger\" role=\"progressbar\" style={{width: `${props.progress}%`}} aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\"> <p className=\"precentage-on-bar\">{props.progress}%</p></div>\n        </div>\n        </div>\n        </div>\n       \n        <div className= \"row\">\n            <div className=\"col-10 col-md-8\">\n            <input type=\"text\" className=\"form-control  content5\"  name=\"text_name\" placeholder=\" Add a new Task\"  aria-describedby =\"inputGroup-sizing-Default\"/>\n            </div>\n\n\n            <div className=\"col-10 col-md-2\" >\n            <button type=\"button\" className=\"btn btn-danger content6\" align=\"center\"> <h4>  +  </h4>  </button>\n\n            </div>\n        \n        \n        </div>\n              \n      \n  </div>\n  );\n}\n\nexport default InputAndAdd;\n","import React from 'react';\nimport './NumberOfTasks.css';\n\nfunction NumberOfTasks(props) {\n  return (\n\n\n    <div className=\"container \">\n        <div className= \"row col-10  numberoftasks \">\n           <div className=\"col-12 col-md-9 numberoftext_text\" align=\"center\">\n           <p >{ props.count } {props.text}</p>\n            </div>\n        </div>  \n    </div>\n  );\n}\n\nexport default NumberOfTasks;\n","import React, { useState } from \"react\";\n\nimport IncompletedTask from './IncompletedTask/IncompletedTask';\nimport CompletedTask from './CompletedTask/CompletedTask';\nimport InputAndAdd from './InputAndAdd/InputAndAdd';\nimport NumberOfTasks from './NumberOfTasks/NumberOfTasks';\nimport './App.css';\n\n\n\nfunction App() {\n\n  const [ activeTasks] = useState([\n    { text: \"Task1\",  dueDate: \"2020-06-01\" },\n    { text: \"Task2\",  dueDate: \"2020-07-01\" },\n    { text: \"Task2\",  dueDate: \"2020-05-01\"}\n  ]);\n\n  const [ completedTasks] = useState([\n    { text: \"Task1\",  dueDate: \"2020-06-01\" },\n    { text: \"Task2\",  dueDate: \"2020-07-01\" },\n    {text: \"Task3\",  dueDate: \"2020-06-01\" },\n    { text: \"Task4\",  dueDate: \"2020-07-01\" },\n    { text: \"Task4\",  dueDate: \"2020-07-01\" },\n    { text: \"Task5\",  dueDate: \"2020-05-01\"}\n  ]);\n\n\n\n  const progressPrecentage= (activeTasks.length *100)/(activeTasks.length + completedTasks.length )\n\n  \n\n  \n  return (\n\n   \n\n\n    <div className=\"main_div\">\n      \n     \n      <div className=\"headermargin\">\n      <InputAndAdd count={activeTasks.length+ completedTasks.length} progress={Math.round(progressPrecentage)} />\n      </div>\n      \n      <NumberOfTasks  count={ activeTasks.length }  text=\" Remained Tasks\"/> \n      <div className=\"list-group\"> \n\n    \n      <IncompletedTask text=\"First Task\" />\n      <IncompletedTask text=\"Second Task\"/>\n      <IncompletedTask text=\"Third Task\"/> \n      </div>\n\n      <NumberOfTasks count= { completedTasks.length } text=\"Completed Tasks\" /> \n\n      <div>\n      <CompletedTask text=\"First Task\"/>\n      <CompletedTask text=\"Second Task\"/>\n      <CompletedTask text=\"Third Task\"/>\n      <CompletedTask text=\"Forth Task\"/>\n      <CompletedTask text=\"Fifth Task\"/>\n\n      </div>\n\n      <footer>&copy; Tech Returner 2020 - Zainab Noori</footer>\n\n      \n      \n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}