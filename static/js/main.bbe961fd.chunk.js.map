{"version":3,"sources":["IncompletedTask/IncompletedTask.js","CompletedTask/CompletedTask.js","InputAndAdd/InputAndAdd.js","NumberOfTasks/NumberOfTasks.js","App.js","serviceWorker.js","index.js"],"names":["IncompletedTask","props","className","align","text","type","onClick","completeTask","taskId","deleteTask","CompletedTask","trashCompletedTask","InputAndAdd","useState","setText","num","count","role","style","width","progress","name","placeholder","aria-describedby","onChange","event","target","value","addTask","NumberOfTasks","App","activeTasks","setActiveTasks","completedTasks","setCompletedTasks","useEffect","axios","get","then","response","console","log","data","remainTasks","Tasks","filter","task","completed","finishTasks","catch","error","finally","progressPrecentage","length","delete","updateTasks","updateTheTask","find","put","completedTask","newTask","post","updatedTask","Math","round","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bbe961fd.chunk.js","sourcesContent":["import React from 'react';\nimport './IncompletedTask.css';\n\nfunction IncompletedTask(props) {\n\n  function deleteClick() {\n    // console.log(props.id);\n    props.deleteTask(props.taskId);\n  }\n\n  function completeClick() {\n    props.completeTask(props.taskId);\n    // console.log(props.id);\n  }\n  return (\n    <div className=\"container\" align=\"center\">\n      <div className=\"row col-10 list-group-item d-flex justify-content-between align-items-center \">\n        <div className=\"col-12 col-md-6  task-text\" align=\"center\">\n          {props.text}\n        </div>\n        <div className=\"col-12 col-md-5\" >\n          <button type=\"button\" className=\"content3 btn btn-danger\" onClick={completeClick}> Complete</button>\n          <button type=\"button\" className=\"content3 btn btn-danger \" onClick={deleteClick} >  Delete  </button>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default IncompletedTask;\n","import React from 'react';\nimport { FaRegTrashAlt } from 'react-icons/fa';\nimport { FaRegCheckCircle } from 'react-icons/fa'; // insert Trash Icon from React - Font Awesome \"https://react-icons.github.io/icons?name=fa\"\nimport './CompletedTask.css';\n\n\n\nfunction CompletedTask(props) {\n  function trashCompletedClick() {\n    props.trashCompletedTask(props.taskId);\n\n  }\n\n  return (\n\n    <div className=\"container \" align=\"center\">\n      <div className=\"row col-10 list-group-item d-flex justify-content-between align-items-center \">\n\n        <div className=\"col-12 col-md-6 task-text1\" align=\"center\">\n          <span className=\" line-through\">{props.text}</span>\n        </div>\n\n        <div className=\"col-12 col-md-5\">\n          <span className=\"badge badge-primary  content4 \"> <FaRegCheckCircle /> Completed </span>\n          <button className=\"badge badge-primary content4\" onClick={trashCompletedClick}><FaRegTrashAlt /> Remove </button>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default CompletedTask;\n\n\n\n// trash alternate","import React, { Fragment, useState } from 'react';\n\nimport './InputAndAdd.css';\n\n\nfunction InputAndAdd(props) {\n  const [text, setText] = useState(\"\");\n  function textChange(event) {\n    setText(event.target.value);\n\n  }\n\n  function addTaskButton() {\n    props.addTask(text);\n    setText(\"\");          // Reset the input field after adding it\n  }\n\n  return (\n\n    <div className=\"container \" align=\"center\">\n      <p className=\"numberoftext_text1\">  Tasks To Do : </p>\n      <p className=\" number0fProgress\"> {props.num} / {props.count} Completed</p>\n      <div className=\"row\">\n        <div className=\"col-10 col-md-8\">\n          <div className=\"progress bar\" >\n            <div className=\"progress-bar bg-danger \"\n              role=\"progressbar\" style={{ width: `${props.progress}%` }} > <p className=\"precentage-on-bar\">{props.progress}% {props.text}</p></div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-10 col-md-8\">\n          <input\n            type=\"text\"\n            className=\"form-control  content5\"\n            name=\"text_name\" placeholder=\" Add a new Task\"\n            aria-describedby=\"inputGroup-sizing-Default\"\n            onChange={textChange}\n            value={text} />\n        </div>\n        <div className=\"col-10 col-md-2\" >\n          <button\n            type=\"button\"\n            className=\"btn btn-danger content6\"\n            align=\"center\"\n            onClick={addTaskButton}\n          > <h4>  +  </h4>  </button>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default InputAndAdd;\n","import React from 'react';\nimport './NumberOfTasks.css';\n\nfunction NumberOfTasks(props) {\n  return (\n\n\n    <div className=\"container \">\n      <div className=\"row col-10  numberoftasks \">\n        <div className=\"col-12 col-md-9 numberoftext_text\" align=\"center\">\n          <p >{props.count} {props.text}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default NumberOfTasks;\n","import React, { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport IncompletedTask from './IncompletedTask/IncompletedTask';\nimport CompletedTask from './CompletedTask/CompletedTask';\nimport InputAndAdd from './InputAndAdd/InputAndAdd';\nimport NumberOfTasks from './NumberOfTasks/NumberOfTasks';\nimport axios from 'axios';\nimport './App.css';\n\n\nfunction App() {\n\n  // const [ activeTasks,setActiveTasks] = useState([\n  //   { text: \"Task1\", completed: false,  dueDate: \"2020-06-01\", id:uuidv4()},\n  //   { text: \"Task2\",completed: false,  dueDate: \"2020-07-01\", id:uuidv4()},\n  //   { text: \"Task3\", completed: false, dueDate: \"2020-05-01\", id:uuidv4()}\n  // ]);\n  // const [ completedTasks, setCompletedTasks] = useState([]);\n\n  const [activeTasks, setActiveTasks] = useState([]);\n  const [completedTasks, setCompletedTasks] = useState([]);\n\n  ////////////////////// Get tasks  //////////////////////\n  useEffect(() => {\n    axios\n      .get('https://wtcm5r9agk.execute-api.eu-west-2.amazonaws.com/dev/tasks')\n      .then(//request is successful\n        response => {\n          console.log(response.data);\n          const remainTasks = response.data.Tasks.filter(task => task.completed === 0);\n          setActiveTasks(remainTasks);\n          const finishTasks = response.data.Tasks.filter(task => task.completed === 1);\n          setCompletedTasks(finishTasks);\n        })\n      .catch(// an error\n        (error) => {\n          console.log('Error getting data', error)\n        }\n      )\n      .finally(() => console.log(\"I am done\"))\n  }, []);\n\n  \n  const progressPrecentage = (completedTasks.length * 100) / (completedTasks.length + activeTasks.length)\n\n\n  /////////////////////////////////// DELETE Incompleted task /////////////////////////////\n  function deleteTask(taskId) {\n    // const updateTasks = activeTasks && activeTasks.filter(task => task.taskId !== id); // filter the tasks if there are tasks\n    // setActiveTasks(updateTasks);\n    axios\n      .delete(`https://wtcm5r9agk.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}`)\n      .then(response => {\n        const updateTasks = activeTasks.filter(task => task.taskId !== taskId);\n        setActiveTasks(updateTasks);\n      })\n      .catch((error) => {\n        console.log(\"Could not delete task\", error);\n      });\n  }\n\n\n  ///////////////////////////////////////////// Complete a task ////////////////////////////////////\n  function completeTask(taskId) {\n\n    const updateTheTask = activeTasks.find(task => task.taskId === taskId);\n    updateTheTask.completed = true;\n\n    axios\n      .put(`https://wtcm5r9agk.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}`, updateTheTask)\n      .then(response => {\n        const updateTasks = activeTasks.filter(task => task !== updateTheTask);\n        setActiveTasks(updateTasks);\n        let completedTask = [...completedTasks, updateTheTask];\n        setCompletedTasks(completedTask);\n      })\n      .catch(error => {\n        console.log(\"Could not update the task\", error);\n      });\n\n\n  }\n  /////////////////////////////////////// Post (add) a task  ///////////////////////////////////\n  function addTask(text) {\n    const newTask = {\n      text: text, completed: false\n      //  ,id:uuidv4()\n    }\n    axios\n      .post(\"https://wtcm5r9agk.execute-api.eu-west-2.amazonaws.com/dev/tasks\", newTask)\n      .then(  // if the request is successful, get the taskId and set it to the new task\n        (response) => {\n          newTask.taskId = response.data.task[0].taskId;\n          const updatedTask = [...activeTasks, newTask];\n          setActiveTasks(updatedTask);\n        }\n      )\n\n      .catch((error) => {\n        console.log(\"Error adding a task\", error)\n      })\n  }\n\n  /////////////////////////////////////// Delete a completed task ///////////////////////////////////\n  function trashCompletedTask(taskId) {\n\n    axios\n      .delete(`https://wtcm5r9agk.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}`)\n      .then(response => {\n        const updateTasks = completedTasks.filter(task => task.taskId !== taskId);\n        setCompletedTasks(updateTasks);\n      })\n      .catch((error) => {\n        console.log(\"Could not delete task\", error);\n      });\n\n  }\n  return (\n\n    <div className=\"main_div\">\n      <div className=\"headermargin\">\n        <InputAndAdd\n          addTask={addTask}\n          num={completedTasks.length}\n          count={activeTasks.length + completedTasks.length}\n          progress={Math.round(progressPrecentage)}\n          text={<big> &nbsp;Completed </big>} />\n      </div>\n\n      <NumberOfTasks count={activeTasks.length} text=\" Remained Tasks\" />\n\n      <div>\n        {activeTasks.map(task => <IncompletedTask\n          completeTask={completeTask}\n          deleteTask={deleteTask}\n          taskId={task.taskId}\n          key={task.taskId}\n          text={task.text} />)}\n      </div>\n\n      <NumberOfTasks count={completedTasks.length} text=\"Completed Tasks\" />\n\n      <div>\n        {completedTasks.map(task => <CompletedTask\n          key={task.taskId}\n          text={task.text}\n          taskId={task.taskId}\n          trashCompletedTask={trashCompletedTask} />)}\n      </div>\n\n      <footer>&copy; Tech Returner 2020 - Zainab Noori</footer>\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}